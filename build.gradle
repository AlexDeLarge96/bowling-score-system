plugins {
    id 'java'
    id 'jacoco'
    id 'application'
    id 'com.diffplug.spotless' version '5.17.0'
}

group 'com.jobsity'
version '1.0'

mainClassName = 'com.jobsity.bowling_score_system.BowlingScoreApp'

jar {
    manifest {
        attributes 'Main-Class': mainClassName
    }
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(11)
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

ext {
    lombokVersion = '1.18.22'
    junitVersion = '5.8.2'
    slf4jVersion = '1.7.32'
}

dependencies {
    //Annotations
    implementation 'org.jetbrains:annotations:23.0.0'

    //Log dependencies
    implementation "org.slf4j:slf4j-api:$slf4jVersion"
    implementation "org.slf4j:slf4j-simple:$slf4jVersion"


    //Testing dependencies
    testImplementation 'org.mockito:mockito-junit-jupiter:4.2.0'
    testImplementation "org.junit.jupiter:junit-jupiter-api:$junitVersion"
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:$junitVersion"
    testImplementation "org.junit.jupiter:junit-jupiter-params:$junitVersion"

    //Lombok
    compileOnly "org.projectlombok:lombok:$lombokVersion"
    annotationProcessor "org.projectlombok:lombok:$lombokVersion"
    testCompileOnly "org.projectlombok:lombok:$lombokVersion"
    testAnnotationProcessor "org.projectlombok:lombok:$lombokVersion"
}

test {
    useJUnitPlatform()
}

jacoco {
    toolVersion = '0.8.7'
}

test {
    finalizedBy jacocoTestCoverageVerification
}

def jacocoExclude = [
        "com/jobsity/bowling_score_system/BowlingScoreApp.class",
        "com/jobsity/bowling_score_system/exceptions/InvalidScoreInputException.class"
]

jacocoTestReport {
    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: jacocoExclude)
        }))
    }
    finalizedBy jacocoTestCoverageVerification
    dependsOn test
}

jacocoTestCoverageVerification {
    afterEvaluate {
        getClassDirectories().setFrom(classDirectories.files.collect {
            fileTree(dir: it, exclude: jacocoExclude)
        })
    }
    dependsOn jacocoTestReport
    violationRules {
        rule {
            limit {
                counter = 'LINE'
                value = 'COVEREDRATIO'
                minimum = 0.80
            }
            limit {
                counter = 'BRANCH'
                value = 'COVEREDRATIO'
                minimum = 0.80
            }
        }
    }
}

spotless {
    java {
        googleJavaFormat('1.13.0')
        removeUnusedImports()
    }
}